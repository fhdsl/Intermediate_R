---
title: "W4: Writing your first function"
format: 
  revealjs:
    smaller: true
    scrollable: true
    echo: true
output-location: fragment
---

## Advice on writing functions

![](https://cs.wellesley.edu/~cs110/lectures/L16/images/function.png){width="100"}

. . .

Code that has a well-defined set of inputs and outputs make a good function.

A function should do only one, well-defined task.

## Anatomy of a function definition

*Function definition consists of assigning a **function name** with a "function" statement that has a comma-separated list of named **function arguments**, and a **return expression**. The function name is stored as a variable in the global environment.*

. . .

```{r}
addFunction = function(argument1, argument2) {
  result = argument1 + argument2 
  return(result)
}
z = addFunction(3, 4)
```

. . .

With function definitions, not all code runs from top to bottom. The first four lines defines the function, but the function is never run. It is called on line 5, and the lines within the function are executed.

. . .

When the function is called in line 5, the variables are reassigned to function arguments to be used within the function and helps with the modular form.

## Local and global environments

*{ } represents variable scoping: within each { }, if variables are defined, they are stored in a **local environment**, and is only accessible within { }. All function arguments are stored in the local environment. The overall environment of the program is called the **global environment** and can be also accessed within { }.*

. . .

This "privacy" in the local environment is to make functions modular - they are independent tools that does not depend on the status of the global environment.

## Step-by-step example

Using the `addFunction` function, let's see step-by-step how the R interpreter understands our code:

![We define the function in the global environment.](../images/func1.png){alt="We define the function in the global environment."}

. . .

![We call the function, and the function arguments 3, 4 are assigned to argument1 and argument2, respectively in the function's local environment.](../images/func2.png){alt="We call the function, and the function arguments 3, 4 are assigned to argument1 and argument2, respectively in the function's local environment."}

. . .

![We run the first line of code in the function body. The new variable "result" is stored in the local environment because it is within { }.](../images/func3.png){alt="We run the first line of code in the function body. The new variable \"result\" is stored in the local environment because it is within { }."}

. . .

![We run the second line of code in the function body to return a value. The return value from the function is assigned to the variable z in the global environment. All local variables for the function are erased now that the function call is over.](../images/func4.png){alt="We run the second line of code in the function body to return a value. The return value from the function is assigned to the variable z in the global environment. All local variables for the function are erased now that the function call is over."}

## Your turn!

Create a function, called `add_and_raise_power` in which the function takes in 3 numeric arguments. The function computes the following: the first two arguments are added together and raised to a power determined by the 3rd argument. The function returns the resulting value.

Here is a use case: `add_and_raise_power(1, 2, 3) = 27` because the function will return this expression: `(1 + 2) ^ 3`.

Another use case: `add_and_raise_power(3, 1, 2) = 16` because of the expression `(3 + 1) ^ 2`. Confirm with that these use cases work.

## Another exercise

Create a function, called `my_dim` in which the function takes in one argument: a dataframe. The function returns the following: a length-2 numeric vector in which the first element is the number of rows in the dataframe, and the second element is the number of columns in the dataframe. Your result should be identical as the `dim` function. How can you leverage existing functions such as `nrow` and `ncol`?

Use case: `my_dim(penguins) = c(344, 8)`
